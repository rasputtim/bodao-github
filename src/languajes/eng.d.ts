import { TAGS } from '../factory/types/index.js';
declare const eng: {
    use: {
        command: string;
    };
    abuse: {
        active: string;
        inative: string;
        activated: string;
        deactivated: string;
        none: string;
        standings: string;
        reseted: string;
    };
    notes: {
        display: string;
        none: string;
        not_found: (notename: any) => string;
        name: string;
        created: (notename: any) => string;
        deleted: (notename: any) => string;
        exists: (notename: any) => string;
        willdelete: (notename: any) => string;
        confirm: (notename: any) => string;
    };
    remind: {
        usage: string;
        past: string;
        late: string;
    };
    list: {
        display: string;
        createListCommandTXT: string;
        delListCommandTXT: string;
        fillList: string;
        delCommandTXT: string;
        addCommandTXT: string;
        editCommandTXT: string;
    };
    pong: () => string;
    wait: () => string;
    titleAFK: string;
    titleMenu: string;
    titleAntiFlood: string;
    titleTime: string;
    titleAnime: string;
    titleAntiPorn: string;
    titleAntiFakes: string;
    titleAntiFakes2: string;
    titleAntiForeign: string;
    titleAntiLink: string;
    titleAntiGroup: string;
    titleAntiVirtex: string;
    titleBan: string;
    titleChat: string;
    titleFull: string;
    titleHentai: string;
    titleLevel: string;
    titleWelcome: string;
    titlePremium: string;
    titleIntro: string;
    linkNsfw: () => string;
    Greetings: string[];
    reportErrorFound: (usedPrefix: any, command: any) => string;
    reportShort: () => string;
    reportLong: () => string;
    reportFrom: () => string;
    From: () => string;
    Message: () => string;
    badw: string | undefined;
    reportMessage: (command: any) => string;
    PanelSubMenu: (tag: any, prefix: any, pushname: any, actividad: any, role: any, showdisabled?: boolean) => string;
    PanelMenuHelp: (index: any, prefix: any, pushname: any, actividad: any, role: any) => string;
    PanelMenu: (prefix: any, pushname: any, actividad: any, role: any, disabledTags: TAGS[], showDisabled?: boolean) => string;
    FooterPM: (CovidApi: any) => string;
    GetHelp: (prefixo: any) => string;
    MenuList: (tag: TAGS, prefix: any, showdisabled?: boolean) => string;
    BanCall: (helpcall: any) => string;
    AutoSaludo: () => string;
    Wlc1: () => string;
    Wlc2: () => string;
    Wlc3: (num: any, metadata: any, dateComplete: any, gpdesc: any) => string;
    Wlc4: () => string;
    Wlc5: (num: any) => string;
    NoSpam1: () => string;
    NoSpam2: (pushname: any) => string;
    NoReg: (pushname: any) => string;
    NoNsfw: () => string;
    NoPorn: () => string;
    NoImage: () => string;
    NoVideo: () => string;
    NoAudio: () => string;
    NoFlood: () => string;
    NoWords: () => string;
    NoToxic: () => string;
    NoPrivate: () => string;
    NoKICK: () => string;
    NoForeign: () => string;
    NoLink: () => string;
    NoVirtex: () => string;
    PreFijo: () => string;
    error: {
        error: string;
        wrong_format: string;
        sorry: string;
        norm: string;
        not_active: string;
        guiphy: string;
        guiphyCode: string;
        admin: string;
        owner: string;
        group: string;
        botAdm: string;
        join: string;
        fileTooBig: string;
        limit: string;
        notClearBG: string;
        nameMessage: (name: any, message: any) => string;
    };
    success: {
        sending: string;
        join: string;
        sticker: string;
        greeting: string;
        spam: string;
        bible: string;
        audio: string;
        stkToImg: string;
    };
    what: {
        message: string;
        wrong: string;
        text: string;
        looking: string;
    };
    search: {
        bible: string;
        lyrics: (query: any) => string;
        wikipedia: (query: any) => string;
        account: (username: any) => string;
        receipt: (food: any) => string;
        sticker: (query: any) => string;
        youtube: (query: any) => string;
        playstore: (query: any) => string;
        shopee: (query: any) => string;
        whois: (ip: any) => string;
        movie: (title: any) => string;
        twitterTrend: string;
    };
    time: {
        actual: string;
    };
    Erreply: () => string;
    ErrorResponse: () => string;
    ErrorFetch: (command: any) => string;
    SinLimite: (pushname: any) => string;
    SinLimite2: (pushname: any) => string;
    Limite: (pushname: any) => string;
    NivelUp: (dateComplete: any, senderNumber: any, getLevel: any, getLevelingLevel: any, sender: any, per: any, getLevelingXp: any, role: any, role2: any) => string;
    MinGp1: () => string;
    MinGp2: () => string;
    NoTraba1: () => string;
    NoTraba2: (saltos: any, eliminar: any, pushname: any) => string;
    NoPriv: (privcre: any) => string;
    NoLinks1: () => string;
    NoLinks2: () => string;
    NoLinks3: () => string;
    Pong: (conexiont: any) => string;
    NoReg2: (prefix: any) => string;
    SoloGp: () => string;
    SoloAdm: () => string;
    YaActivo: (command: any) => string;
    YaActivoSi: (command: any, groupName: any) => string;
    YaActivoNo: (command: any, groupName: any) => string;
    ActiVar: () => string;
    DesActiVar: () => string;
    AdminBot: () => string;
    SoloCreador: () => string;
    SoloOwner: () => string;
    SoloModerator: () => string;
    Modo0: () => string;
    Modo1: () => string;
    Modo2: () => string;
    Modo3: () => string;
    Modo4: () => string;
    ModNet0: () => string;
    ModNet1: () => string;
    ModNet2: () => string;
    ModNet3: () => string;
    ModNet4: () => string;
    NoPriv1: () => string;
    NoPriv2: () => string;
    ModFakeNo: () => string;
    ModFakeYes: () => string;
    ModBlackListNo: () => string;
    ModBlackListYes: () => string;
    ModLevelingNo: () => string;
    ModLevelingYes: () => string;
    ModFakeGrNo: () => string;
    ModWelcomeYes: () => string;
    ModWelcomeNo: () => string;
    ModFakeGrYes: () => string;
    ModPremiumNo: () => string;
    ModPremiumYes: () => string;
    ModPremiumTasting: (endTasting: any) => void;
    ModFunYes: () => string;
    ModFunNo: () => string;
    ModOffNo: () => string;
    ModOffYes: () => string;
    PreDit0: () => string;
    PreDit1: () => string;
    PreDit2: () => string;
    NomBot0: () => string;
    NomBot1: () => string;
    NomBot2: () => string;
    PrinCre0: () => string;
    PrinCre1: () => string;
    PrinCre2: () => string;
    MyRed0: () => string;
    MyRed1: () => string;
    MyRed2: () => string;
    UsLimit0: () => string;
    UsLimit1: () => string;
    UsLimit2: () => string;
    UsLimit3: () => string;
    UsLimit4: () => string;
    PfBot0: () => string;
    PfBot1: () => string;
    ProCes: (pushname: any) => string;
    QuImage: (prefix: any, command: any) => string;
    SuPrim: () => string;
    NoTexto: () => string;
    BcGrupos0: (gmap: any) => string;
    BcGrupos1: (gmap: any) => string;
    BcTodos0: (tmap: any) => string;
    BcTodos1: () => string;
    BanUser0: () => string;
    BanUser1: () => string;
    CerrarGp0: (pushname: any, prefix: any, command: any) => string;
    CerrarGp1: (UwU: any, pushname: any) => string;
    CerrarGp2: () => string;
    AbrirGp: () => string;
    NomGp0: () => string;
    NomGp1: (groupName: any) => string;
    DesGp0: () => string;
    DesGp1: (nwn: any, groupDesc: any) => string;
    PfGp0: () => string;
    PfGp1: () => string;
    ToDos: (groupName: any, pushname: any, texto: any) => string;
    DarP: (usuariop: any, pushname: any) => string;
    QuitP: (usuarioq: any, pushname: any) => string;
    KickUSer: (adiuser: any, pushname: any) => string;
    UsEnLinea: () => string;
    Baneao: (senderNumber: any) => string;
    BotInfo: () => string;
    GraciAs: () => string;
    MasCmds: () => string;
    VerCmds: () => string;
    YaReg: () => string;
    MyReg: () => string;
    MyReg0: () => string;
    MyReg1: () => string;
    MyReg2: () => string;
    MyReg3: (age: any) => string;
    MyReg4: (age: any) => string;
    MyReg5: (nwn: any, time: any, nomreg: any, pushname: any, edreg: any, sender: any, codereg: any) => string;
    MyReg6: () => string;
    CmdsR0: () => string;
    CmdsR1: () => string;
    CmdsA0: () => string;
    CmdsA1: () => string;
    CmdsO0: () => string;
    CmdsO1: () => string;
    CmdsH0: () => string;
    CmdsH1: () => string;
    MCmds0: () => string;
    MCmds1: () => string;
    AntLinkInfo: () => string;
    AntiFakeInfo: () => string;
    AFKInfo: () => string;
    FunModeInfo: () => string;
    BanModeInfo: () => string;
    KickModeInfo: () => string;
    EnableInfo: () => string;
    AntiForeignInfo: () => string;
    AntiFakes2Info: () => string;
    AntiLinkInfo: () => string;
    AntiVirtexInfo: () => string;
    AntiPrivateInfo: () => string;
    AutoWelcomeInfo: () => string;
    LevelingInfo: () => string;
    HentaiInfo: () => string;
    AnimeInfo: () => string;
    AntiPornInfo: () => string;
    OffLineInfo: () => string;
    AntiFloodInfo: () => string;
    PremiumInfo: () => string;
    NotAllow: string;
    BotIdiomChanged: (lang: any) => void;
    PromoteAdmin: string;
    Promote: string;
    DemoteAdmin: string;
    Demote: string;
    Remove: string;
    UserKick: string;
    ProfileMemory: string;
    ProfileArch: string;
    ProfileSpeed: string;
    ProfileConnection: string;
    ProfilePlataform: string;
    Library: string;
    ProfileExecTime: string;
    ProfileVersion: string;
    ImageRequestedBy: (command: any, senderNUMBER: any) => string;
    ImageRequestedBywithSource: (command: any, senderNUMBER: any, source?: any) => string;
    ImageTextPro1: (command: any, text: any, pushname: any) => string;
    ImageTextPro2: (command: any, text: any, pushname: any) => string;
    SearchResult: (pushname: any) => string;
    tos: (ownerNumber: string) => string;
    textTnC: () => string;
    textMenuHeader: (pushname: any) => string;
    textMenuAFooter: () => string;
    textPremium: () => void;
    toShowMenu: (prefix: any) => string;
};
export default eng;
//# sourceMappingURL=eng.d.ts.map